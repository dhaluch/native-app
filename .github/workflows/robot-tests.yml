name: Run Robot Framework Tests

on:
  push:
    branches:
      - main
      - feature/*
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: 📦 Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install robotframework

      - name: 🟢 Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: 🤖 Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: 🛠️ Configure PATH and Android folders
        run: |
          export PATH=$PATH:$ANDROID_HOME/emulator
          echo "PATH: $PATH"
          mkdir -p $HOME/.android
          touch $HOME/.android/emu-update-last-check.ini
          mkdir -p $HOME/.android/avd

      - name: 📲 Create Android emulator
        run: |
          export ANDROID_SDK_ROOT=$ANDROID_HOME
          export ANDROID_AVD_HOME=$HOME/.android/avd
          export PATH=$PATH:$ANDROID_HOME/emulator

          echo "y" | sdkmanager --install 'system-images;android-30;google_apis;x86_64'

          echo "no" | avdmanager create avd \
            -n test \
            -k 'system-images;android-30;google_apis;x86_64' \
            --device 'pixel' --force

          $ANDROID_HOME/emulator/emulator -list-avds || echo "⚠️ Nenhum AVD listado!"
          ls -la "$ANDROID_AVD_HOME" || echo "⚠️ Diretório AVD não encontrado!"

      - name: 🚀 Start Android emulator (software mode)
        run: |
          export PATH=$PATH:$ANDROID_HOME/emulator
          nohup $ANDROID_HOME/emulator/emulator -avd test \
            -accel off \
            -gpu swiftshader_indirect \
            -no-boot-anim \
            -no-snapshot \
            -no-snapshot-save \
            -camera-back none \
            -camera-front none \
            -no-window \
            -no-audio &
          adb wait-for-device
          adb devices

      - name: ⏳ Wait for full boot (multi-signal, with timeouts)
        run: |
          set -e
          BOOT_TIMEOUT=360   # seg máx para sinais de boot
          PM_TIMEOUT=180     # seg máx para Package Manager

          echo "⏳ Aguardando sinais de boot (sys.boot_completed OU dev.bootcomplete)..."

          # 1) sys.boot_completed == 1
          if ! timeout ${BOOT_TIMEOUT}s bash -c 'until adb shell getprop sys.boot_completed 2>/dev/null | tr -d "\r" | grep -q "^1$"; do sleep 3; done'; then
            echo "⚠️ sys.boot_completed não ficou 1 dentro do timeout; tentando dev.bootcomplete..."
            # 2) fallback: dev.bootcomplete == 1
            timeout ${BOOT_TIMEOUT}s bash -c 'until adb shell getprop dev.bootcomplete 2>/dev/null | tr -d "\r" | grep -q "^1$"; do sleep 3; done'
          fi
          echo "✅ Sinal de boot recebido."

          # 3) bootanim parado (ignora se a prop não existir ou se estourar timeout)
          echo "⏳ Checando boot animation..."
          timeout 120s bash -c 'until [ "$(adb shell getprop init.svc.bootanim 2>/dev/null | tr -d "\r")" = "stopped" ]; do sleep 2; done' || echo "⚠️ bootanim não disponível/encerrado — seguindo mesmo assim."

          # 4) Package Manager responsivo
          echo "⏳ Esperando Package Manager..."
          timeout ${PM_TIMEOUT}s bash -c 'until adb shell pm list packages >/dev/null 2>&1; do sleep 3; done'
          echo "✅ Package Manager pronto."

      - name: 🔓 Keep screen awake & dismiss keyguard (no-fail)
        run: |
          adb shell settings put global stay_on_while_plugged_in 3 || true
          adb shell wm dismiss-keyguard || true
          adb shell input keyevent KEYCODE_WAKEUP || true
          adb shell input keyevent 82 || true

      - name: 📦 Install Appium
        run: |
          npm install -g appium
          appium -v

      - name: 🧰 Install Appium UIAutomator2 Driver
        run: |
          appium driver install uiautomator2@4.0.1

      - name: 🏃 Start Appium server
        run: |
          nohup appium &

      - name: 🤖 Install Robot Framework Appium Library
        run: |
          pip install robotframework-appiumlibrary

      - name: 🧪 Run Robot Framework tests with report
        run: |
          robot --outputdir reports tests/

      - name: 📤 Upload Robot Framework report
        uses: actions/upload-artifact@v4
        with:
          name: robot-report
          path: reports/
