name: Run Robot Framework Tests

on:
  push:
    branches:
      - main
      - feature/*
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: 📦 Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install robotframework

      - name: 🟢 Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: 🤖 Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: 🛠️ Configure PATH and Android folders
        run: |
          # PATH para o binário do emulator
          export PATH=$PATH:$ANDROID_HOME/emulator
          echo "PATH: $PATH"

          # Pastas necessárias e .ini para evitar warnings no log
          mkdir -p $HOME/.android
          touch $HOME/.android/emu-update-last-check.ini
          mkdir -p $HOME/.android/avd
          echo "✅ Pastas criadas em $HOME/.android"

      - name: 📲 Create Android emulator
        run: |
          export ANDROID_SDK_ROOT=$ANDROID_HOME
          export ANDROID_AVD_HOME=$HOME/.android/avd
          export PATH=$PATH:$ANDROID_HOME/emulator

          echo "📦 Instalando system image Android 30 x86_64 Google APIs..."
          echo "y" | sdkmanager --install 'system-images;android-30;google_apis;x86_64'

          echo "🧱 Criando AVD 'test'..."
          echo "no" | avdmanager create avd \
            -n test \
            -k 'system-images;android-30;google_apis;x86_64' \
            --device 'pixel' --force

          echo "📋 AVDs disponíveis:"
          $ANDROID_HOME/emulator/emulator -list-avds || echo "⚠️ Nenhum AVD listado!"

          echo "📂 Conteúdo de $ANDROID_AVD_HOME:"
          ls -la "$ANDROID_AVD_HOME" || echo "⚠️ Diretório AVD não encontrado!"

      - name: 🚀 Start Android emulator (software mode)
        run: |
          export PATH=$PATH:$ANDROID_HOME/emulator
          nohup $ANDROID_HOME/emulator/emulator -avd test \
            -accel off \
            -gpu swiftshader_indirect \
            -no-snapshot \
            -no-window \
            -no-audio &
          # aguarda ADB iniciar e detectar o dispositivo
          adb wait-for-device
          adb devices

      - name: ⏳ Wait for full boot (props & bootanim, with timeout)
        run: |
          set -e
          timeout_secs=300
          start_ts=$(date +%s)

          wait_prop () {
            local prop="$1"
            local expected="$2"
            while true; do
              val=$(adb shell getprop "$prop" 2>/dev/null | tr -d '\r')
              now=$(date +%s)
              elapsed=$((now - start_ts))
              if [ "$val" = "$expected" ]; then
                echo "✅ $prop == $expected"
                return 0
              fi
              if [ $elapsed -ge $timeout_secs ]; then
                echo "❌ Timeout esperando $prop==$expected (último: '$val')"
                return 1
              fi
              echo "⏳ Aguardando $prop==$expected (atual: '$val')... ($elapsed/${timeout_secs}s)"
              sleep 5
            done
          }

          # 1) sys.boot_completed = 1
          wait_prop "sys.boot_completed" "1"

          # 2) init.svc.bootanim = stopped
          wait_prop "init.svc.bootanim" "stopped"

          # 3) PM/AM prontos (cmd package responsivo)
          while true; do
            if adb shell cmd package list packages >/dev/null 2>&1; then
              echo "✅ Package manager pronto"
              break
            fi
            now=$(date +%s)
            elapsed=$((now - start_ts))
            if [ $elapsed -ge $timeout_secs ]; then
              echo "❌ Timeout esperando Package Manager"
              exit 1
            fi
            echo "⏳ Aguardando Package Manager... ($elapsed/${timeout_secs}s)"
            sleep 3
          done

          echo "✅ Android fully booted."

      - name: 🔓 Keep screen awake & dismiss keyguard (no-fail)
        run: |
          # Mantém a tela ligada enquanto 'plugado' (emulador)
          adb shell settings put global stay_on_while_plugged_in 3 || true
          # Desbloqueios/ações que não falham o job se o serviço 'input' não estiver pronto
          adb shell wm dismiss-keyguard || true
          adb shell input keyevent KEYCODE_WAKEUP || true
          adb shell input keyevent 82 || true

      - name: 📦 Install Appium
        run: |
          npm install -g appium
          appium -v

      - name: 🧰 Install Appium UIAutomator2 Driver
        run: |
          appium driver install uiautomator2@4.0.1

      - name: 🏃 Start Appium server
        run: |
          nohup appium &

      - name: 🤖 Install Robot Framework Appium Library
        run: |
          pip install robotframework-appiumlibrary

      - name: 🧪 Run Robot Framework tests with report
        run: |
          robot --outputdir reports tests/

      - name: 📤 Upload Robot Framework report
        uses: actions/upload-artifact@v4
        with:
          name: robot-report
          path: reports/
