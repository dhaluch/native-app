name: Run Robot Framework Tests

on:
  push:
    branches:
      - main
      - feature/*
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: 📦 Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install robotframework
          pip install robotframework-appiumlibrary
          # Se seus testes usam Browser/Playwright, mantenha as 2 linhas abaixo:
          pip install robotframework-browser
          rfbrowser init

      - name: 🟢 Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: 🤖 Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: 🛠️ Configure PATH and Android folders
        run: |
          export PATH=$PATH:$ANDROID_HOME/emulator
          mkdir -p $HOME/.android
          touch $HOME/.android/emu-update-last-check.ini
          mkdir -p $HOME/.android/avd

      - name: 📲 Create Android emulator
        run: |
          export ANDROID_SDK_ROOT=$ANDROID_HOME
          export ANDROID_AVD_HOME=$HOME/.android/avd
          export PATH=$PATH:$ANDROID_HOME/emulator

          echo "y" | sdkmanager --install 'system-images;android-30;google_apis;x86_64'

          echo "no" | avdmanager create avd \
            -n test \
            -k 'system-images;android-30;google_apis;x86_64' \
            --device 'pixel' --force

          $ANDROID_HOME/emulator/emulator -list-avds || echo "⚠️ Nenhum AVD listado!"
          ls -la "$ANDROID_AVD_HOME" || echo "⚠️ Diretório AVD não encontrado!"

      - name: 🚀 Start Android emulator (software mode)
        run: |
          export PATH=$PATH:$ANDROID_HOME/emulator
          nohup $ANDROID_HOME/emulator/emulator -avd test \
            -accel off \
            -gpu swiftshader_indirect \
            -no-boot-anim \
            -no-snapshot \
            -no-snapshot-save \
            -camera-back none \
            -camera-front none \
            -no-window \
            -no-audio &
          adb wait-for-device
          adb devices

      - name: ⏳ Wait for full boot (multi-signal, with timeouts)
        run: |
          set -e
          BOOT_TIMEOUT=360
          PM_TIMEOUT=180

          echo "⏳ Esperando sys.boot_completed ou dev.bootcomplete..."
          if ! timeout ${BOOT_TIMEOUT}s bash -c 'until adb shell getprop sys.boot_completed 2>/dev/null | tr -d "\r" | grep -q "^1$"; do sleep 3; done'; then
            echo "⚠️ sys.boot_completed não sinalizou; usando dev.bootcomplete..."
            timeout ${BOOT_TIMEOUT}s bash -c 'until adb shell getprop dev.bootcomplete 2>/dev/null | tr -d "\r" | grep -q "^1$"; do sleep 3; done'
          fi
          echo "✅ Sinal de boot recebido."

          echo "⏳ Checando boot animation (tolerante)..."
          timeout 120s bash -c 'until [ "$(adb shell getprop init.svc.bootanim 2>/dev/null | tr -d "\r")" = "stopped" ]; do sleep 2; done' || echo "⚠️ bootanim indisponível — seguindo."

          echo "⏳ Esperando Package Manager..."
          timeout ${PM_TIMEOUT}s bash -c 'until adb shell pm list packages >/dev/null 2>&1; do sleep 3; done'
          echo "✅ Package Manager pronto."

      - name: 🔓 Keep screen awake & dismiss keyguard (no-fail, sem input)
        run: |
          adb shell settings put global stay_on_while_plugged_in 3 || true
          adb shell wm dismiss-keyguard || true
          adb shell am start -a android.intent.action.MAIN -c android.intent.category.HOME || true

      # 🔴 NOVO: garante user 0 ativo e serviço "settings" pronto (resolve "Can't find service: settings")
      - name: ✅ Ensure Android user & settings service ready
        run: |
          set -e
          # garante que o user 0 está rodando
          adb shell am start-user 0 || true

          # espera até o serviço "settings" responder via cmd
          SETTINGS_TIMEOUT=180
          echo "⏳ Aguardando serviço 'settings' ficar disponível..."
          if ! timeout ${SETTINGS_TIMEOUT}s bash -c 'until adb shell cmd settings list global >/dev/null 2>&1; do sleep 3; done'; then
            echo "❌ Serviço 'settings' não respondeu dentro do timeout."
            # dump rápido para diagnóstico
            adb shell service list | tail -n +1 || true
            exit 1
          fi
          echo "✅ Serviço 'settings' disponível."

      - name: 📦 Install Appium (CLI + driver)
        run: |
          npm install -g appium
          appium -v
          appium driver install uiautomator2@4.0.1

      - name: 🏃 Start Appium server
        run: |
          nohup appium &

      - name: 🧪 Run Robot Framework tests with report
        run: |
          mkdir -p reports
          robot --outputdir reports tests/

      - name: 🧷 Create index.html (redirect to report)
        if: always()
        run: |
          test -d reports || mkdir -p reports
          cat > reports/index.html <<'EOF'
          <!doctype html><meta charset="utf-8">
          <meta http-equiv="refresh" content="0; url=report.html">
          <title>Robot Reports</title>
          <p>Redirecionando para <a href="report.html">report.html</a>…</p>
          EOF

      - name: 📤 Upload Robot Framework report (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: robot-report
          path: reports/

  deploy-pages:
    if: always()
    needs: test
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: ⬆️ Upload Pages artifact (reports/)
        uses: actions/upload-pages-artifact@v3
        with:
          path: reports

      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
